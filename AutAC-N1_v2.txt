// Note: Before executing this code, please put the following file into an appropriate folder
// ZeroDimensionalIdealVariety.txt

load"C:/Kudo/Automorphism_new/ZeroDimensionalIdealVariety.txt";
// Load the file "ZeroDimensionalIdealVariety.txt".
// Replace "Kudo/Automorphism_new" by the name of a folder including the file "ZeroDimensionalIdealVariety.txt"

/*************/
EvaluationToMatrix:= function(M,v)

	MM:=[];
	for i in [1..Nrows(M)] do
		MM[i]:=[];
		for j in [1..Ncols(M)] do
			MM[i][j]:=Evaluate(M[i,j],v);
		end for;
	end for;

	return Matrix(MM);

end function;
/*************/


/********************************************************************/
// Given two mtrices A and B, this function returns
// true if A = a*B for some a in K with a ne 0, false otherwise.
/********************************************************************/
Equiv:=function(A,B,K)

	flag:=0;
	for a in [b : b in K | b ne K!0] do
		if A eq a*B then
			flag:=1;
			break a;
		end if;
	end for;

	if flag eq 1 then
		return true;
	else
		return false;
	end if;

end function;

p:=11;
K:=FiniteField(p);

L<a1,a2,b1,b2,c,s,d1,d2,e1,e2,r> := PolynomialRing(K,11,"grevlex");
L0<x,y,z,w> := PolynomialRing(L,4);


Q := 2*x*w + 2*y*z;

Polynomial :=[
x^2*y + x^2*z + x*z^2 + 4*y^3 + 2*y^2*z + 10*y^2*w + 3*y*z^2 + 8*y*z*w + 8*y*w^2 + 8*z^3 + 7*z^2*w + 7*z*w^2 + 4*w^3,
x^2*y + x^2*z + y^3 + y^2*z + 7*y*z^2 + 4*y*w^2 + 2*z^3 + 9*z*w^2,
x^2*y + x^2*z + x*z^2 + 9*y^3 + 6*y^2*z + 5*y^2*w + 8*y*z^2 + 5*y*z*w + 2*y*w^2 + z^3 + 2*z^2*w + 7*z*w^2 + w^3];

E := Matrix(L0,4,4,[1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1]);
A := Matrix(L0,4,4,[1,0,0,0, 0,0,1,0, 0,1,0,0, 0,0,0,1]);
T := Matrix(L0,4,4,[a1,0,0,0, 0,b1,0,0, 0,0,c*b2,0, 0,0,0,c*a2]);
U1 := Matrix(L0,4,4,[1,d1,0,0, 0,1,0,0, 0,0,1,-d1, 0,0,0,1]);
U2 := Matrix(L0,4,4,[1,0,d2,0, 0,1,0,-d2, 0,0,1,0, 0,0,0,1]);
U12 := U1*U2;
S1 := Matrix(L0,4,4,[0,1,0,0, 1,0,0,0, 0,0,0,1, 0,0,1,0]);
S2 := Matrix(L0,4,4,[0,0,1,0, 0,0,0,1, 1,0,0,0, 0,1,0,0]);
U3 := Matrix(L0,4,4,[1,e1,0,0, 0,1,0,0, 0,0,1,-e1, 0,0,0,1]);
U4 := Matrix(L0,4,4,[1,0,e2,0, 0,1,0,-e2, 0,0,1,0, 0,0,0,1]);
U34 := U3*U4;

O1 := E*T*U12*E;
O2 := E*T*U12*S1*U3;
O3 := E*T*U12*S2*U4;
O4 := E*T*U12*S1*S2*U34;
O5 := A*T*U12*E;
O6 := A*T*U12*S1*U3;
O7 := A*T*U12*S2*U4;
O8 := A*T*U12*S1*S2*U34;
O := [O1,O2,O3,O4,O5,O6,O7,O8];

Var := Matrix(4,1,[x, y, z, w]);

Aut := [];
for P in Polynomial do
	Aut_P:=[];
	for n in [1..8] do
		Aut_ideal := {};
		R := O[n]; S := R*Var;
		X := S[1][1]; Y := S[2][1]; Z := S[3][1]; W := S[4][1];
		F1 := Evaluate(P,<X,Y,Z,W>);
		F2 := F1 - r*P;
		F3 := F2 - (y*z + x*w)*(x*Coefficient(Coefficient(Coefficient(F2,1,1),2,1),3,1) + y*Coefficient(Coefficient(F2,2,2),3,1) + z*Coefficient(Coefficient(F2,2,1),3,2) + w*Coefficient(Coefficient(Coefficient(F2,2,1),3,1),4,1));
		for i, j, k, l in [0..3] do
			if i + j + k + l eq 3 then
				Deg := [i,j,k,l];
				Coef := F3;
				m := 1;
				while m le 4 do
					Coef := Coefficient(Coef,m,Deg[m]);
					m := m + 1;
				end while;
				if Coef ne 0 then
					Aut_ideal := Aut_ideal join {Coef};
				end if;
			end if;
		end for;
		if n eq 1 then
			Aut_ideal := Aut_ideal join {e1,e2};
		elif n eq 2 then
			Aut_ideal := Aut_ideal join {e2};
		elif n eq 3 then
			Aut_ideal := Aut_ideal join {e1};
		elif n eq 5 then
			Aut_ideal := Aut_ideal join {e1,e2};
		elif n eq 6 then
			Aut_ideal := Aut_ideal join {e2};
		elif n eq 7 then
			Aut_ideal := Aut_ideal join {e1};
		end if;
		Aut_ideal := Aut_ideal join {a1*a2-1,b1*b2-1,c*s-1,r-1};
		Aut_ideal := SetToSequence(Aut_ideal);
		Aut_P[n]:=[];
		for i in [1..#Aut_ideal] do
			Aut_P[n][i]:=MonomialCoefficient(Aut_ideal[i],1);
		end for;
	end for;
	Aut:=Append(Aut,Aut_P);
end for;


V_set:=[];

"========";
for j in [1..#Aut] do
	V_set[j]:=[];
	"P_{",j,"}^(alc)=", Polynomial[j];
	num_root:=0;
	for i in [1..8] do
		V_set[j][i]:=[];
		F:=Aut[j][i];
		G:=GroebnerBasis(F);
		if 1 in G then
			//"no root";
		elif Dimension(ideal<L|F>) gt 0 then
			"not zero dimensional!";
		else
			V,KK:=ZeroDimensionalIdealVarietyOverAlgebraicClosure(F);
			"the smallest field including all the roots of the multivariate system over algebraic closure:", KK;
			V_set[j][i]:=V_set[j][i] cat V;
			num_root:=num_root+#V;
		end if;
	end for;
	"total roots:", num_root;
	"========";
end for;



E:=Matrix(L,4,4,[1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1]);
A:=Matrix(L,4,4,[1,0,0,0, 0,0,1,0, 0,1,0,0, 0,0,0,1]);
T:=Matrix(L,4,4,[a1,0,0,0, 0,b1,0,0, 0,0,c*b2,0, 0,0,0,c*a2]);
U1:=Matrix(L,4,4,[1,d1,0,0, 0,1,0,0, 0,0,1,-d1, 0,0,0,1]);
U2:=Matrix(L,4,4,[1,0,d2,0, 0,1,0,-d2, 0,0,1,0, 0,0,0,1]);
U12:=U1*U2;
S1:=Matrix(L,4,4,[0,1,0,0, 1,0,0,0, 0,0,0,1, 0,0,1,0]);
S2:=Matrix(L,4,4,[0,0,1,0, 0,0,0,1, 1,0,0,0, 0,1,0,0]);
S12:=S1*S2;
B1:=E*T*U12; B2:=A*T*U12;
U3:=Matrix(L,4,4,[1,e1,0,0, 0,1,0,0, 0,0,1,-e1, 0,0,0,1]);
U4:=Matrix(L,4,4,[1,0,e2,0, 0,1,0,-e2, 0,0,1,0, 0,0,0,1]);
U34:=U3*U4;

C1:=B1*E*U34; C2:=B1*S1*U34; C3:=B1*S2*U34; C4:=B1*S12*U34;
C5:=B2*E*U34; C6:=B2*S1*U34; C7:=B2*S2*U34; C8:=B2*S12*U34;
O:=[C1,C2,C3,C4,C5,C6,C7,C8];

//SetLogFile("List_of_Matrices_AutAC-N1_v2.txt");

Mat_set_N1:=[];

count:=0;
for j in [1..#V_set] do
	Mat_set:=[];
	for i in [1..#V_set[j]] do
		if #V_set[j][i] ne 0 then
			for k in [1..#V_set[j][i]] do
				
				Mat_set:=Append(Mat_set,EvaluationToMatrix(O[i],V_set[j][i][k]));
				
			end for;
		end if;
		
	end for;
	Mat_set_N1[j]:=Mat_set;
end for;


"M_N1:=[];";


MM_N1:=Mat_set_N1;

"//------------";
for kk in [1..#MM_N1] do
	"M:=[];";
	count:=0;
	for k in [1..#MM_N1[kk]] do
		count:=count+1;
		"M[",count,"]:=Matrix([";
		for i in [1..4] do
			[MM_N1[kk][k][i,j]: j in [1..4]];
			if i ne 4 then
				",";
			end if;
		end for;
		"]);";
	end for;
	"M_N1[",kk,"]:=","M;";
	"//------------";
end for;


//UnsetLogFile();